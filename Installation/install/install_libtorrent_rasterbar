#!/bin/bash
#
# https://github.com/Aniverse/inexistence
# Author: Aniverse
#
update=2019.02.16
script_version=1.2.3
################################################################################################
OutputLOG=/etc/inexistence/01.Log/install_libtorrent_rasterbar.txt    # /dev/null
DebLocation=/etc/inexistence/01.Log/DebPackages
SCLocation=/etc/inexistence/01.Log/SourceCodes
LOCKLocation=/etc/inexistence/01.Log/Lock

################################################################################################ Colors

black=$(tput setaf 0); red=$(tput setaf 1); green=$(tput setaf 2); yellow=$(tput setaf 3); blue=$(tput setaf 4); magenta=$(tput setaf 5); cyan=$(tput setaf 6); white=$(tput setaf 7);
on_red=$(tput setab 1); on_green=$(tput setab 2); on_yellow=$(tput setab 3); on_blue=$(tput setab 4); on_magenta=$(tput setab 5); on_cyan=$(tput setab 6); on_white=$(tput setab 7); bold=$(tput bold);
dim=$(tput dim); underline=$(tput smul); reset_underline=$(tput rmul); standout=$(tput smso); reset_standout=$(tput rmso); normal=$(tput sgr0); alert=${white}${on_red}; title=${standout};
baihuangse=${white}${on_yellow}; bailanse=${white}${on_blue}; bailvse=${white}${on_green}; baiqingse=${white}${on_cyan}; baihongse=${white}${on_red}; baizise=${white}${on_magenta};
heibaise=${black}${on_white}; heihuangse=${on_yellow}${black}; jiacu=${normal}${bold}; shanshuo=$(tput blink); wuguangbiao=$(tput civis); guangbiao=$(tput cnorm)
CW="${bold}${baihongse} ERROR ${jiacu}";ZY="${baihongse}${bold} ATTENTION ${jiacu}";JG="${baihongse}${bold} WARNING ${jiacu}"

################################################################################################

function version_ge(){ test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" == "$1" ; }

function _check_status() {
local LockName=$1
[[   -f /tmp/$LockName.1.lock ]] && echo -e " ${green}${bold}DONE${normal}"
[[   -f /tmp/$LockName.2.lock ]] && echo -e " ${red}${bold}FAILED${normal}"
[[ ! -f /tmp/$LockName.1.lock ]] && [[ ! -f /tmp/$LockName.2.lock ]] && echo -e " ${red}${bold}Unknown State${normal}" ; }

spinner() {
    local pid=$1
    local delay=0.25
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [${bold}${yellow}%c${normal}]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# Get options
OPTS=$(getopt -n "$0" -o m:v:b: --long "debug,version:,branch:" -- "$@")

eval set -- "$OPTS"

while true; do
  case "$1" in
    -v | --version      ) version="$2"  ; shift ; shift ;;
    -b | --branch       ) branch="$2"   ; shift ; shift ;;
     * ) break ;;
  esac
done

################################################################################################
# Use RC_1_1 if not specified
[[ -z $branch ]] && branch=RC_1_1

# Determin RC_1_0 and RC_1_1's version
 [[ $branch == RC_1_0 ]] && version=1.0.11
 [[ $branch == RC_1_1 ]] && version=1.1.12
 [[ $branch == RC_1_2 ]] && version=1.2.0

# Transform version to branch
[[ $( echo $version | grep -Eo "[012]\.[0-9]+\.[0-9]+" ) ]] && branchV=$( echo libtorrent-$version | sed "s/\./_/g" )

[[ $debug == 1 ]] && echo -e "version=$version, branch=$branch, branchV=$branchV"
# Use 6.6.6 when version cannot be determind
#[ ! -z $branch ] && [ -z $version ] && version=$( wget -qO- https://github.com/arvidn/libtorrent/raw/$branch/include/libtorrent/version.hpp | grep LIBTORRENT_VERSION | tail -n1 | grep -oE "[0-9.]+\"" | sed "s/.0\"//" )

# Random number for marking different installations
RN=$(shuf -i 1-999 -n1)
rm -f /tmp/lt.1.lock /tmp/lt.2.lock /tmp/ltd.1.lock /tmp/ltd.2.lock
################################################################################################

# Install build dependencies for libtorrent-rasterbar
function _install_lt_dependencies() {

yum install -y boost-devel >> $OutputLOG 2>&1 && touch /tmp/ltd.1.lock || touch /tmp/ltd.2.lock

[[ -f /tmp/ltd.1.lock ]] && touch $LOCKLocation/libtorrent-rasterbar.dependencies.lock ;
}


# Install from source codes
function _install_lt_source() {
wget https://github.com/arvidn/libtorrent/releases/download/libtorrent-${$branchV}/libtorrent-rasterbar-${version}.tar.gz
#git clone --depth=1 -b $branch https://github.com/arvidn/libtorrent libtorrent-$version-$RN >> $OutputLOG 2>&1

tar zxf libtorrent-rasterbar-$version.tar.gz
mv libtorrent-rasterbar-$version libtorrent-$version-$RN
cd libtorrent-$version-$RN

# See here for details: https://github.com/qbittorrent/qBittorrent/issues/6383
if version_ge $version 1.1 ; then
    wget https://github.com/QuickBox/QB/raw/master/setup/sources/libtorrent-rasterbar-RC_1_1.patch
    patch -p1 < libtorrent-rasterbar-RC_1_1.patch
elif version_ge $version 1.0 ; then
    wget https://github.com/QuickBox/QB/raw/master/setup/sources/libtorrent-rasterbar-RC_1_0.patch
    patch -p1 < libtorrent-rasterbar-RC_1_0.patch
else
    sed -i "s/+ target_specific(),/+ target_specific() + ['-std=c++11'],/" bindings/python/setup.py || NoPatch=1
fi

mkdir -p doc-pak && echo "an efficient feature complete C++ bittorrent implementation" > description-pak

./autotool.sh >> $OutputLOG 2>&1

if [[ -z $NoPatch ]]; then
    ./configure --enable-python-binding --with-libiconv --prefix=/usr \
                --disable-debug --enable-encryption --with-libgeoip=system CXXFLAGS=-std=c++11  >> $OutputLOG 2>&1 # For both Deluge and qBittorrent
else
    ./configure --enable-python-binding --with-libiconv --prefix=/usr \
                --disable-debug --enable-encryption --with-libgeoip=system                      >> $OutputLOG 2>&1
fi

make -j$MAXCPUS >> $OutputLOG 2>&1
strip -s bindings/python/build/lib.linux-x86_64-2.7/libtorrent.so
touch /tmp/lt.1.lock || {
make install >> $OutputLOG 2>&1 

python -c "import libtorrent; print libtorrent.version"
ldconfig
touch /tmp/lt.1.lock || touch /tmp/lt.2.lock ; }

cp -f libtorrent-rasterb*.deb $DebLocation
[[ -f /tmp/lt.1.lock ]] && touch $LOCKLocation/libtorrent-rasterbar.lock
[[ -f /tmp/lt.1.lock ]] && touch $LOCKLocation/libtorrent-rasterbar.source.$branch.lock ; }

mkdir -p $SCLocation $DebLocation $LOCKLocation
cd       $SCLocation
echo "\n\n\n$(date "+%Y.%m.%d.%H.%M.%S")   $RN\n\n\n" >> $OutputLOG


[[ ! -f $LOCKLocation/libtorrent-rasterbar.dependencies.lock ]] && {
echo -ne "Installing libtorrent-rasterbar build dependencies ..." | tee -a $OutputLOG
_install_lt_dependencies & spinner $!
_check_status ltd ; }

if [[ ` echo $branch | grep -Eo "[012]_[0-9]_[0-9]+" ` ]]; then
  echo -ne "Installing libtorrent-rasterbar ${bold}${cyan}$version${normal} from source codes ..." | tee -a $OutputLOG
else
  echo -ne "Installing libtorrent-rasterbar ${bold}$branch branch (${cyan}$version${jiacu})${normal} from source codes ..." | tee -a $OutputLOG
fi

_install_lt_source & spinner $!

cd ; 
_check_status lt
